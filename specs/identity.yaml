swagger: "2.0"
info:
  title: Identity API
  description: Identity and authentication
  version: 1.0.0
host: api.identity.manifold.co
schemes:
- https
produces:
- application/json
consumes:
- application/json
basePath: /v1
securityDefinitions:
  jwtRequired:
    type: apiKey
    name: Authorization
    in: header
  tokenSignatureRequired:
    type: apiKey
    name: Authorization
    in: header
  loginTokenRequired:
    type: apiKey
    name: Authorization
    in: header
security:
- jwtRequired: []
paths:
  /analytics/:
    post:
      summary: An endpoint used by the cli to push analytics into segment.
      security: []
      parameters:
      - name: body
        in: body
        description: An analytics event
        required: true
        schema:
          $ref: '#/definitions/AnalyticsEvent'
      tags:
      - User
      responses:
        204:
          description: An empty response
        400:
          description: Invalid request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unknown token, or token not owned the the requester
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
  /tokens/auth:
    post:
      summary: Exchange a login token for a general use auth token
      security:
      - loginTokenRequired: []
      parameters:
      - name: body
        in: body
        description: |
          Auth token create request
        required: true
        schema:
          $ref: '#/definitions/AuthTokenRequest'
      - name: authorization
        in: header
        description: A JWT Bearer token for the user, as returned from /tokens/login
        required: true
        type: string
      tags:
      - Authentication
      responses:
        201:
          description: An authentication token.
          schema:
            $ref: '#/definitions/AuthToken'
        400:
          description: Invalid token request supplied
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Expired token supplied
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /tokens/login:
    post:
      summary: Create a new login token
      security: []
      parameters:
      - name: body
        in: body
        description: |
          Login token create request
        required: true
        schema:
          $ref: '#/definitions/LoginTokenRequest'
      tags:
      - Authentication
      responses:
        201:
          description: A login token.
          schema:
            $ref: '#/definitions/LoginTokenResponse'
        400:
          description: Invalid token request supplied
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /tokens/{token}:
    delete:
      summary: Revoke an auth token for log out
      parameters:
      - name: token
        in: path
        required: true
        type: string
        maxLength: 295
      tags:
      - Authentication
      responses:
        204:
          description: Empty response
        401:
          description: Unknown token, or token not owned the the requester
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /tokens:
    get:
      summary: List API tokens
      parameters:
        - name: type
          in: query
          description: Only list tokens which match this type
          type: string
          enum: [api]
          required: true
        - name: me
          in: query
          description: Only list tokens with the user as the owner
          type: boolean
          required: false
        - name: team_id
          in: query
          description: |
            ID of the Team to filter tokens by, stored as a
            base32 encoded 18 byte identifier.
          type: string
          pattern: '^[0-9abcdefghjkmnpqrtuvwxyz]{29}$'
          format: base32ID
          required: false
      tags:
        - Authentication
      responses:
        200:
          description: A list of API tokens.
          schema:
            type: array
            items: { $ref: "#/definitions/APIToken" }
        401:
          description: Unknown token, or token not owned the the requester
          schema: { $ref: '#/definitions/Error' }
        500:
          description: Request failed due to an internal server error.
          schema: { $ref: '#/definitions/Error' }
        default:
          description: Unexpected error
          schema: { $ref: '#/definitions/Error' }
    post:
      summary: Create a new api token
      parameters:
        - name: body
          in: body
          description: |
            API token create request
          required: true
          schema: { $ref: '#/definitions/APITokenRequest' }
      tags:
        - Authentication
      responses:
        201:
          description: An API token.
          schema: { $ref: '#/definitions/APIToken' }
        400:
          description: Invalid token request supplied
          schema: { $ref: '#/definitions/Error' }
        500:
          description: Request failed due to an internal server error.
          schema: { $ref: '#/definitions/Error' }
        default:
          description: Unexpected error
          schema: { $ref: '#/definitions/Error' }
  /self:
    get:
      summary: Retrieve the underlying user represented by a Token
      tags:
      - User
      responses:
        200:
          description: A user object.
          schema:
            $ref: '#/definitions/User'
        400:
          description: Bad request
          schema: { $ref: '#/definitions/Error' }
        401:
          description: Unknown token, or token not owned the the requester
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
  /users:
    post:
      summary: Create a new user
      security: []
      tags:
      - User
      parameters:
      - name: body
        in: body
        description: |
          User create request
        required: true
        schema:
          $ref: '#/definitions/CreateUser'
      responses:
        201:
          description: Complete user object
          schema:
            $ref: '#/definitions/User'
        400:
          description: Validation failed for request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/forgot-password:
    post:
      x-manifold-audience: browser
      security: []
      summary: Reset password with an emailed forgot password token
      tags:
      - User
      parameters:
      - name: body
        in: body
        description: |
          Forgot password payload
        required: true
        schema:
          $ref: '#/definitions/ForgotPassword'
      responses:
        204:
          description: Forgot password complete
        401:
          description: Validation failed for request
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Validation failed for request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/forgot-password/token:
    post:
      x-manifold-audience: browser
      security: []
      summary: User has forgotten password, send a reset token
      tags:
      - User
      parameters:
      - name: body
        in: body
        description: |
          Request to be issued a forgot password token
        required: true
        schema:
          $ref: '#/definitions/ForgotPasswordCreate'
      responses:
        204:
          description: Forgot password has either been sent, or ignored for unknown
            user
        401:
          description: Validation failed for request
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Validation failed for request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/verify:
    post:
      summary: Verify email address
      tags:
      - User
      parameters:
      - name: body
        in: body
        description: |
          Email verify request
        required: true
        schema:
          $ref: '#/definitions/VerifyEmail'
      responses:
        204:
          description: Verification complete
        401:
          description: Validation failed for request
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Validation failed for request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{id}:
    patch:
      summary: Update user profile
      security:
      - tokenSignatureRequired: []
      tags:
      - User
      parameters:
      - name: id
        in: path
        description: |
          ID of the user to update, stored as a base32 encoded 18 byte
          identifier.
        required: true
        type: string
        pattern: ^[0-9abcdefghjkmnpqrtuvwxyz]{29}$
        format: base32ID
      - name: body
        in: body
        description: |
          User update request
        required: true
        schema:
          $ref: '#/definitions/UpdateUser'
      responses:
        200:
          description: Complete user object
          schema:
            $ref: '#/definitions/User'
        400:
          description: Validation failed for request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /teams:
    get:
      summary: List teams for the current authenticated user
      tags:
      - Team
      responses:
        200:
          description: Teams the authenticated user belongs to
          schema:
            type: array
            items:
              $ref: '#/definitions/Team'
        401:
          description: Authentication failed for the request.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create a new team
      tags:
      - Team
      parameters:
      - name: body
        in: body
        description: |
          Team create request.
        required: true
        schema:
          $ref: '#/definitions/CreateTeam'
      responses:
        201:
          description: Complete team object
          schema:
            $ref: '#/definitions/Team'
        400:
          description: Validation failed for request.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Authentication failed for the request.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user has already created (reserved) an team.
          schema:
            $ref: '#/definitions/Error'
        409:
          description: An team with this label already exists.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /teams/{id}:
    get:
      summary: Get a single team's profile
      tags:
      - Team
      parameters:
      - name: id
        in: path
        description: |
          ID of the Team to lookup, stored as a base32 encoded 18 byte
          identifier.
        required: true
        type: string
        pattern: ^[0-9abcdefghjkmnpqrtuvwxyz]{29}$
        format: base32ID
      responses:
        200:
          description: Complete team object
          schema:
            $ref: '#/definitions/Team'
        400:
          description: Validation failed for request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: Update team profile
      tags:
      - Team
      parameters:
      - name: id
        in: path
        description: |
          ID of the Team to lookup, stored as a base32 encoded 18 byte
          identifier.
        required: true
        type: string
        pattern: ^[0-9abcdefghjkmnpqrtuvwxyz]{29}$
        format: base32ID
      - name: body
        in: body
        description: |
          Team update request
        required: true
        schema:
          $ref: '#/definitions/UpdateTeam'
      responses:
        200:
          description: Complete team object
          schema:
            $ref: '#/definitions/Team'
        400:
          description: Validation failed for request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /teams/{id}/members:
    get:
      summary: Get team members by team id
      tags:
      - Team
      security:
      - xInternalAuthRequired: []
      - jwtRequired: []
      parameters:
      - name: id
        in: path
        description: |
          ID of the Team to lookup, stored as a base32 encoded 18 byte
          identifier.
        required: true
        type: string
        pattern: ^[0-9abcdefghjkmnpqrtuvwxyz]{29}$
        format: base32ID
      responses:
        200:
          description: List of users
          schema:
            type: array
            items:
              $ref: '#/definitions/MemberProfile'
        400:
          description: Validation failed for request.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Authentication failed for the request.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /invites/{id}/:
    delete:
      summary: Revoke an existing invite
      tags:
      - Invite
      parameters:
      - name: id
        in: path
        description: |
          ID of the Invite to lookup, stored as a base32 encoded 18 byte
          identifier.
        required: true
        type: string
        pattern: ^[0-9abcdefghjkmnpqrtuvwxyz]{29}$
        format: base32ID
      responses:
        204:
          description: Empty response
        404:
          description: Invite not found
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Authentication failed for the request.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /invites/{token}/:
    get:
      summary: Retrieve an invite's details by token
      tags:
      - Invite
      security: []
      parameters:
      - name: token
        in: path
        description: |
          Token corresponding to the Invite being retrieved.
        required: true
        type: string
        pattern: ^[a-zA-Z0-9_-]{52}$
      responses:
        200:
          description: Invite object
          schema:
            $ref: '#/definitions/PublicInvite'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /invites/accept:
    post:
      summary: Accept an invite
      tags:
      - Invite
      parameters:
      - name: body
        in: body
        description: |
          Invite create request.
        required: true
        schema:
          $ref: '#/definitions/AcceptInvite'
      responses:
        204:
          description: Empty response
        400:
          description: Validation failed for request.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Authentication failed for the request.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /invites:
    get:
      summary: List of invites for the user
      tags:
      - Invite
      parameters:
      - name: team_id
        in: query
        description: |
          ID of the Team to filter Invites by, stored as a
          base32encoded 18 byte identifier.
        type: string
        pattern: ^[0-9abcdefghjkmnpqrtuvwxyz]{29}$
        format: base32ID
        required: true
      responses:
        200:
          description: Invite object
          schema:
            type: array
            items:
              $ref: '#/definitions/Invite'
        401:
          description: Authentication failed for the request.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create a new invite
      tags:
      - Invite
      parameters:
      - name: body
        in: body
        description: |
          Invite create request.
        required: true
        schema:
          $ref: '#/definitions/CreateInvite'
      responses:
        200:
          description: Invite object
          schema:
            $ref: '#/definitions/Invite'
        204:
          description: Empty response
        400:
          description: Validation failed for request.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Authentication failed for the request.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /memberships:
    get:
      summary: List memberships for the user
      tags:
      - Team
      responses:
        200:
          description: Complete team object
          schema:
            type: array
            items:
              $ref: '#/definitions/TeamMembership'
        401:
          description: Authentication failed for the request.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /memberships/{id}:
    patch:
      summary: Change a user's role on a team
      parameters:
        - name: id
          in: path
          description: The base32 encoded 18 byte ID of the membership
          required: true
          type: string
          pattern: '^[0-9abcdefghjkmnpqrtuvwxyz]{29}$'
          format: base32ID
        - name: body
          in: body
          description: Role change request
          required: true
          schema:
          schema: { $ref: '#/definitions/UpdateTeamMembership' }
      tags:
        - Team
      responses:
        200:
          description: Complete Membership object
          schema: { $ref: '#/definitions/TeamMembership' }
        400:
          description: Validation failed for request
          schema: { $ref: '#/definitions/Error' }
        401:
          description: Authentication failed for the request.
          schema: { $ref: '#/definitions/Error' }
        403:
          description: The user does not have sufficient permissions to change a role.
          schema: { $ref: '#/definitions/Error' }
        500:
          description: Request failed due to an internal server error.
          schema: { $ref: '#/definitions/Error' }
        default:
          description: Unexpected error
          schema: { $ref: '#/definitions/Error' }
    delete:
      summary: Remove a member from a team
      parameters:
      - name: id
        in: path
        description: The base32 encoded 18 byte ID of the membership
        required: true
        type: string
        pattern: ^[0-9abcdefghjkmnpqrtuvwxyz]{29}$
        format: base32ID
      tags:
      - Team
      responses:
        204:
          description: Empty response
        401:
          description: Unknown id, or the requestor is not authorized to remove the
            membership
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Request failed due to an internal server error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /roles:
    get:
      summary: List available roles
      security:
        - { tokenRequired: [] }
      parameters:
        - name: team_id
          in: query
          description: |
            ID of the Team to filter tokens by, stored as a
            base32 encoded 18 byte identifier.
          type: string
          pattern: '^[0-9abcdefghjkmnpqrtuvwxyz]{29}$'
          format: base32ID
          required: false
      tags:
        - Role
      responses:
        200:
          description: A list of available roles.
          schema:
            type: array
            items: { $ref: "#/definitions/RoleLabel" }
        400:
          description: Validation failed for request
          schema: { $ref: '#/definitions/Error' }
        500:
          description: Request failed due to an internal server error.
          schema: { $ref: '#/definitions/Error' }
        default:
          description: Unexpected error
          schema: { $ref: '#/definitions/Error' }
definitions:
  ID:
    type: string
    description: A base32 encoded 18 byte identifier.
    pattern: ^[0-9abcdefghjkmnpqrtuvwxyz]{29}$
    format: base32ID
    x-go-type:
      type: ID
      import:
        package: github.com/manifoldco/go-manifold
        alias: manifold
  RoleLabel:
    type: string
    description: A machine readable unique label, which is url safe.
    pattern: '^[a-z0-9][a-z0-9\-\_]{1,128}$'
  Label:
    type: string
    description: A machine readable unique label, which is url safe.
    pattern: ^[a-z0-9][a-z0-9\-\_]{1,128}$
    x-go-type:
      type: Label
      import:
        package: github.com/manifoldco/go-manifold
        alias: manifold
  Name:
    type: string
    description: A name of an entity which is displayed to a human.
    pattern: ^[a-zA-Z][a-z0-9A-Z \-]{2,128}$
    x-go-type:
      type: Name
      import:
        package: github.com/manifoldco/go-manifold
        alias: manifold
  Empty:
    type: object
    additionalProperties: false
  Error:
    type: object
    properties:
      type:
        description: The error type
        type: string
        enum:
        - bad_request
        - not_found
        - unauthorized
        - conflict
        - internal
      message:
        type: array
        description: Explanation of the errors
        items:
          type: string
    x-go-type:
      type: Error
      import:
        package: github.com/manifoldco/go-manifold
        alias: manifold
  AnalyticsEvent:
    type: object
    properties:
      event_name:
        type: string
      user_id:
        $ref: '#/definitions/ID'
      properties:
        type: object
        properties:
          platform:
            type: string
            enum:
            - cli
        additionalProperties: true
    additionalProperties: false
    required:
    - event_name
    - user_id
  User:
    type: object
    properties:
      id:
        $ref: '#/definitions/ID'
      version:
        type: integer
        enum:
        - 1
      type:
        type: string
        enum:
        - user
      body:
        type: object
        properties:
          name:
            $ref: '#/definitions/UserDisplayName'
          email:
            $ref: '#/definitions/Email'
          public_key:
            $ref: '#/definitions/LoginPublicKey'
          verification_code:
            type: string
            pattern: ^[0-9abcdefghjkmnpqrtuvwxyz]{16}$
            maxLength: 16
          state:
            type: string
            enum:
            - unverified
            - verified
        additionalProperties: false
        required:
        - name
        - email
        - public_key
        - state
    additionalProperties: false
    required:
    - id
    - type
    - version
    - body
  CreateUser:
    type: object
    properties:
      body:
        type: object
        properties:
          name:
            $ref: '#/definitions/UserDisplayName'
          email:
            $ref: '#/definitions/Email'
          public_key:
            $ref: '#/definitions/LoginPublicKey'
        additionalProperties: false
        required:
        - name
        - email
        - public_key
    additionalProperties: false
    required:
    - body
  AcceptInvite:
    type: object
    properties:
      token:
        $ref: '#/definitions/LimitedLifeTokenBase32'
    additionalProperties: false
    required:
    - token
  CreateInvite:
    type: object
    properties:
      body:
        type: object
        properties:
          name:
            $ref: '#/definitions/UserDisplayName'
          role:
            $ref: '#/definitions/RoleLabel'
          email:
            $ref: '#/definitions/Email'
          team_id:
            $ref: '#/definitions/ID'
        additionalProperties: false
        required:
        - name
        - email
        - team_id
    additionalProperties: false
    required:
    - body
  Invite:
    type: object
    properties:
      id:
        $ref: '#/definitions/ID'
      type:
        type: string
        enum:
        - invite
      version:
        type: integer
        enum:
        - 1
      body:
        type: object
        properties:
          name:
            $ref: '#/definitions/UserDisplayName'
          email:
            $ref: '#/definitions/Email'
          role:
            $ref: '#/definitions/RoleLabel'
          team_id:
            $ref: '#/definitions/ID'
          invited_by:
            $ref: '#/definitions/ID'
          token:
            $ref: '#/definitions/LimitedLifeTokenBase32'
        additionalProperties: false
        required:
        - token
        - role
        - team_id
        - name
        - email
    additionalProperties: false
    required:
    - id
    - type
    - version
    - body
  PublicInvite:
    type: object
    properties:
      team:
        $ref: '#/definitions/Team'
      role:
        $ref: '#/definitions/RoleLabel'
      invited:
        type: object
        properties:
          name:
            $ref: '#/definitions/UserDisplayName'
          email:
            $ref: '#/definitions/Email'
      invited_by:
        type: object
        properties:
          name:
            $ref: '#/definitions/UserDisplayName'
          email:
            $ref: '#/definitions/Email'
    additionalProperties: false
    required:
    - team
    - role
    - invited
    - invited_by
  CreateTeam:
    type: object
    properties:
      body:
        type: object
        properties:
          name:
            $ref: '#/definitions/Name'
          label:
            $ref: '#/definitions/Label'
        additionalProperties: false
        required:
        - name
        - label
    additionalProperties: false
    required:
    - body
  TeamMembership:
    type: object
    properties:
      id:
        $ref: '#/definitions/ID'
      type:
        type: string
        enum:
        - team
      version:
        type: integer
        enum:
        - 1
      body:
        type: object
        properties:
          user_id:
            $ref: '#/definitions/ID'
          team_id:
            $ref: '#/definitions/ID'
          role:
            $ref: '#/definitions/RoleLabel'
        additionalProperties: false
        required:
          - user_id
          - team_id
          - role
    additionalProperties: false
    required:
    - id
    - type
    - version
    - body
  UpdateTeamMembership:
    type: object
    properties:
      body:
        type: object
        properties:
          role: { $ref: '#/definitions/RoleLabel' }
        required: [ role ]
        additionalProperties: false
    required: [ body ]
    additionalProperties: false
  MemberProfile:
    type: object
    properties:
      user_id:
        $ref: '#/definitions/ID'
      membership_id:
        $ref: '#/definitions/ID'
      role:
        $ref: '#/definitions/RoleLabel'
      email:
        $ref: '#/definitions/Email'
      name:
        $ref: '#/definitions/UserDisplayName'
    additionalProperties: false
    required:
    - user_id
    - membership_id
    - email
    - name
    - role
  Team:
    type: object
    properties:
      id:
        $ref: '#/definitions/ID'
      type:
        type: string
        enum:
        - team
      version:
        type: integer
        enum:
        - 1
      body:
        type: object
        properties:
          name:
            $ref: '#/definitions/Name'
          label:
            $ref: '#/definitions/Label'
        additionalProperties: false
        required:
        - name
        - label
    additionalProperties: false
    required:
    - id
    - type
    - version
    - body
  UpdateTeam:
    type: object
    properties:
      body:
        type: object
        properties:
          name:
            $ref: '#/definitions/Name'
          label:
            $ref: '#/definitions/Label'
        required:
        - name
        - label
        additionalProperties: false
    required:
    - body
    additionalProperties: false
  UpdateUser:
    type: object
    properties:
      body:
        type: object
        properties:
          name:
            $ref: '#/definitions/UserDisplayName'
          email:
            $ref: '#/definitions/Email'
          public_key:
            $ref: '#/definitions/LoginPublicKey'
          auth_token_sig:
            type: string
            pattern: ^[a-zA-Z0-9_-]*$
            minLength: 86
            maxLength: 86
        additionalProperties: false
    additionalProperties: false
  ForgotPassword:
    type: object
    properties:
      email:
        $ref: '#/definitions/Email'
      token:
        $ref: '#/definitions/LimitedLifeTokenBase64'
      public_key:
        $ref: '#/definitions/LoginPublicKey'
    additionalProperties: false
    required:
    - email
    - token
    - public_key
  ForgotPasswordCreate:
    type: object
    properties:
      email:
        $ref: '#/definitions/Email'
    additionalProperties: false
    required:
    - email
  VerifyEmail:
    type: object
    properties:
      body:
        type: object
        properties:
          verification_code:
            type: string
            pattern: ^[0-9abcdefghjkmnpqrtuvwxyz]{16}$
            maxLength: 16
        additionalProperties: false
        required:
        - verification_code
  UserDisplayName:
    type: string
    pattern: ^[a-zA-Z\s\,\.\'\-\pL]+$
    minLength: 3
    maxLength: 64
  Email:
    type: string
    format: email
    x-go-type:
      type: Email
      import:
        package: github.com/manifoldco/go-manifold
        alias: manifold
  LoginPublicKey:
    type: object
    properties:
      salt:
        type: string
        pattern: ^[a-zA-Z0-9_-]*$
        minLength: 22
        maxLength: 22
      value:
        type: string
        pattern: ^[a-zA-Z0-9_-]*$
        minLength: 43
        maxLength: 43
      alg:
        type: string
        enum:
        - eddsa
    additionalProperties: false
    required:
    - salt
    - value
    - alg
  AuthTokenRequest:
    type: object
    properties:
      type:
        type: string
        enum:
        - auth
      login_token_sig:
        type: string
        pattern: ^[a-zA-Z0-9_-]*$
        minLength: 86
        maxLength: 86
    additionalProperties: false
    required:
    - type
    - login_token_sig
  AuthToken:
    type: object
    properties:
      id:
        $ref: '#/definitions/ID'
      version:
        type: integer
        enum:
        - 1
      type:
        type: string
        enum:
        - auth_token
      body:
        type: object
        properties:
          token:
            type: string
            maxLength: 295
          user_id:
            $ref: '#/definitions/ID'
          mechanism:
            type: string
            enum:
            - eddsa
            x-nullable: false
        additionalProperties: false
        required:
        - token
        - user_id
        - type
        - mechanism
    additionalProperties: false
    required:
    - id
    - version
    - type
    - body
  InternalToken:
    type: object
    properties:
      token:
        type: string
    additionalProperties: false
    required:
    - token
  LoginTokenRequest:
    type: object
    properties:
      email:
        type: string
        format: email
    required:
    - email
  LoginTokenResponse:
    type: object
    properties:
      token:
        type: string
      salt:
        type: string
        pattern: ^[a-zA-Z0-9_-]*$
        minLength: 22
        maxLength: 22
    required:
    - token
    - salt
  LoginToken:
    type: object
    properties:
      id:
        $ref: '#/definitions/ID'
      version:
        type: integer
        enum:
        - 1
      type:
        type: string
        enum:
        - login_token
      body:
        type: object
        properties:
          token:
            type: string
            maxLength: 295
          user_id:
            $ref: '#/definitions/ID'
          mechanism:
            type: string
            enum:
            - eddsa
            x-nullable: false
        additionalProperties: false
        required:
        - token
        - user_id
        - type
        - mechanism
    additionalProperties: false
    required:
    - id
    - version
    - type
    - body
  LimitedLifeTokenBase32:
    type: string
    minLength: 52
    maxLength: 52
    pattern: ^[a-zA-Z0-9_-]{52}$
  LimitedLifeTokenBase64:
    type: string
    minLength: 43
    maxLength: 43
    pattern: ^[a-zA-Z0-9_-]{43}$
  OptionalID:
    type: string
    description: A base32 encoded 18 byte identifier.
    pattern: '^[0-9abcdefghjkmnpqrtuvwxyz]{29}$'
    format: base32ID
    x-nullable: true
    x-go-type:
      type: ID
      import:
        package: 'github.com/manifoldco/go-manifold'
        alias: manifold
  APITokenRequest:
    type: object
    properties:
      description: { type: string, minLength: 1, maxLength: 1000 }
      role: { $ref: '#/definitions/RoleLabel' }
      user_id: { $ref: '#/definitions/OptionalID' }
      team_id: { $ref: '#/definitions/OptionalID' }
    additionalProperties: false
    required:
      - role
      - description
  APIToken:
    type: object
    properties:
      id: { $ref: '#/definitions/ID' }
      version: { type: integer, enum: [1] }
      type: { type: string, enum: [api_token] }
      body:
        type: object
        properties:
          first_four:
            type: string
          last_four:
            type: string
          role: { $ref: '#/definitions/RoleLabel' }
          user_id: { $ref: '#/definitions/OptionalID' }
          team_id: { $ref: '#/definitions/OptionalID' }
          token:
            type: string
            maxLength: 60
          description: { type: string, minLength: 1, maxLength: 1000 }
        additionalProperties: false
        required:
          - role
          - user_id
          - team_id
          - first_four
          - last_four
          - description
    additionalProperties: false
    required:
      - id
      - version
      - type
